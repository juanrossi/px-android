apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'mercadopago-sdk_tracking'

    publishedGroupId = 'com.mercadopago'
    libraryName = 'mercadopago-sdk_tracking'
    artifact = 'tracking'

    libraryDescription = 'PX Tracking lib'

    siteUrl = 'https://github.com/mercadopago/px-android_tracking'
    gitUrl = 'https://github.com/mercadopago/px-android_tracking.git'

    libraryVersion = '3.0.2-noop-4'

    developerId = 'matias.gualino'
    developerName = 'Matias Gualino'
    developerEmail = 'matias.gualino@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

version = "3.0.2-noop-4"
group = "com.mercadopago"
archivesBaseName = "tracking"

android {
    compileSdkVersion api_level.toInteger()
    buildToolsVersion build_tools_version
    defaultConfig {
        minSdkVersion min_api_level.toInteger()
        targetSdkVersion api_level.toInteger()
        versionCode 1
        versionName '3.0.2-noop-4'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    packagingOptions {
        exclude 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'LICENSE.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            multiDexEnabled true
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:$support_library_version"
    compile "com.squareup.retrofit2:retrofit:2.1.0"
    compile "com.squareup.okhttp3:logging-interceptor:3.5.0"
    compile "com.google.code.gson:gson:2.7"
    compile "com.squareup.retrofit2:converter-gson:2.1.0"
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

artifacts {
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}